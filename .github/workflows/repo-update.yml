name: Update repo
on:
  push:
    branches:
    - master
    paths:
    - '.github/workflows/repo-update.yml'
  schedule:
    - cron:  '0,30 0-23 * * *'

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  check-repo:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target_repo: [main-aarch64, main-arm, main-i686, main-x86_64, x11-aarch64, x11-arm, x11-i686, x11-x86_64, root-aarch64, root-arm, root-i686, root-x86_64]
      fail-fast: false
    steps:
    - name: Clone check-tools
      run: git clone "https://termux-pacman-bot:${{ secrets.TOKEN }}@github.com/termux-pacman/check-tools"
    - name: Import pub key of Termux-Pacman
      run: gpg --keyserver keyserver.ubuntu.com --recv-keys 998de27318e867ea976ba877389ceed64573dfca
    - name: Clone termux-packages
      run: |
        cd check-tools
        git clone https://github.com/termux-pacman/termux-packages
    - name: Running a scan
      run: |
        target_repo='${{ matrix.target_repo }}'
        REPO="${target_repo%%-*}"
        ARCH="${target_repo#*-}"
        TOTAL="RESULT.${REPO}.${ARCH}"

        case "$REPO" in
          "main") DIR_REPO="termux-packages/packages";;
          "x11") DIR_REPO="termux-packages/x11-packages";;
          "root") DIR_REPO="termux-packages/root-packages";;
          *)
            echo "Error: repo '${REPO}' is unknown"
            exit 0;;
        esac

        cd check-tools
        if [ ! -d "$DIR_REPO" ]; then
          echo "Error: '$DIR_REPO' not found."
          exit 0
        fi

        bash ./check_pkgs_by_repo.sh "$REPO" "$ARCH" "$DIR_REPO"

        mkdir total
        touch ./total/${TOTAL}
        for RESULT in "./output/DOESNOTMATCH.${REPO}.${ARCH}"; do
          if [ -f ${RESULT} ]; then
            cat ${RESULT} | awk '{printf $1 "\n"}' >> ./total/${TOTAL}
          fi
        done
        tar cf total-${{ matrix.target_repo }}-${{ github.sha }}.tar.gz ./total
    - name: Store RESULT.* files
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: total-${{ matrix.target_repo }}-${{ github.sha }}
        path: ./check-tools/total-${{ matrix.target_repo }}-${{ github.sha }}.tar.gz
        if-no-files-found: error

  rebuild-pkgs:
    needs: check-repo
    runs-on: ubuntu-latest
    steps:
    - name: Clone repository
      run: git clone https://github.com/termux-pacman/termux-packages.git termux-packages-pacman
    - name: Get RESULT.* files
      uses: actions/download-artifact@v3
      with:
        path: ./termux-packages-pacman/
    - name: Rebuild packages
      run: |
        cd termux-packages-pacman
        for i in ./total-*/total-*.tar.gz; do
          tar xf $i -C ./
        done
        for i in $(sort ./total/RESULT.* | uniq); do
          BUILD_SOURCE=$(ls */${i}/build.sh 2> /dev/null) || true
          if [ -z "${BUILD_SOURCE}" ]; then
            BUILD_SOURCE=$(ls */*/${i}.subpackage.sh 2> /dev/null) || true
            if [ -n "${BUILD_SOURCE}" ]; then
              BUILD_SOURCE="$(dirname ${BUILD_SOURCE})/build.sh"
            else
              echo "Source package '${i}' was not found, skip"
              continue
            fi
          fi
          PAST_TIME=$(expr $(date +%s) - $(git log -n 1 --date=format:'%s' --format=%cd -- $(dirname ${BUILD_SOURCE})))
          echo "$i - ${BUILD_SOURCE} - $(expr ${PAST_TIME} / 3600)"
        done

  update-repo:
    needs: rebuild-pkgs
    runs-on: ubuntu-latest
    steps:
    - name: Clone repository
      run: git clone https://github.com/termux-pacman/termux-packages.git termux-packages-pacman
    - name: Clone root repository
      run: git clone https://github.com/termux/termux-packages.git
    - name: Update repo
      run: |
        info() {
          echo "==> $1"
        }
        commit() {
          echo "-> $1"
        }
        
        # Edit
        info "Edit"
        cd termux-packages-pacman
        rm -fr */
        cd ../termux-packages
        cp -r * ../termux-packages-pacman
        
        # Get list pkg
        info "Get list pkg"
        cd ../termux-packages-pacman
        list_files=" "
        for i in $(git status -s packages root-packages x11-packages | awk '{print $2}'); do
          dir_sp=(${i//// })
          if [[ ! $(echo "$list_files" | grep " ${dir_sp[0]}/${dir_sp[1]} ") ]]; then
            list_files+="${dir_sp[0]}/${dir_sp[1]} "
          fi
        done
        list_files=($list_files)
        
        # Sort list pkg
        info "Sort list pkg"
        cd ../termux-packages
        declare -A list_values
        list_sort=""
        list_sha=""
        for i in ${list_files[@]}; do
          sha_file=$(git log -n 1 --pretty=format:%H -- $i)
          value="$(git rev-list --count $sha_file)"
          list_values[${value}]=$((${list_values[${value}]}+1))
          list_sort+="${value}-${list_values[${value}]} "
          list_sha+="${sha_file} "
        done
        list_sort=($list_sort)
        list_sha=($list_sha)
        copy_list_sort=($(sort -n <(printf "%s\n" "${list_sort[@]}")))
        search_index() {
          for i in "${!list_sort[@]}"; do
            if [[ "${list_sort[$i]}" = "${1}" ]]; then
              echo "${i}";
            fi
          done
        }
        sort_list_files=""
        for i in ${copy_list_sort[@]}; do
          index=$(search_index "$i")
          if [[ "${i#*-}" = "1" ]]; then
            sort_list_files+=" ${list_sha[$index]}###"
          else
            sort_list_files+="&&"
          fi
          sort_list_files+="${list_files[$index]}"
        done
        exit 0
        
        # Start upload
        info "Start upload"
        cd ../termux-packages-pacman
        needbuild=false
        if $(git log -1 --pretty=%B | grep -q '%needbuild'); then
          needbuild=true
        fi
        git config --global user.name "termux-pacman-bot"
        git config --global user.email "termux-pacman-bot@outlook.com"
        git remote set-url origin "https://termux-pacman-bot:${{ secrets.TOKEN }}@github.com/termux-pacman/termux-packages-pacman.git"
        commit "Update system repo"
        git add .
        git reset packages root-packages x11-packages README.md SECURITY.md repo.json
        {
          git commit -m "Update repo"
          git push origin master
        } || true
        commit "Update repo packages"
        for i in $sort_list_files; do
          i_sp=(${i//###/ })
          commit "    ${i_sp[1]}"
          cd ../termux-packages
          commit_file="$(git show -s --format=%B ${i_sp[0]})"
          cd ../termux-packages-pacman
          git add $(echo ${i_sp[1]} | sed 's/&&/ /g')
          {
            if $needbuild; then
              git commit -m "$(echo $commit_file | sed '/%ci:no-build/d; /\[skip ci\]/d')"
            else
              git commit -m "$commit_file"
            fi
            git push origin master
          } || true
        done
